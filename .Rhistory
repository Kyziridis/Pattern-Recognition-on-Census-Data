data[d]
data[f]
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.1,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.7,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.5,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.3,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.4,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.4,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=0.4,
gap=3, ylab=c("Missing data","Pattern"))
f
is.na(data$age:)
is.na(data$age)
any(is.na(data$age))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data[f]), cex.axis=0.4,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data[f]), cex.axis=0.4,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data[f]), cex.axis=0.3,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data[f]), cex.axis=0.35,
gap=3, ylab=c("Missing data","Pattern"))
mice_plot <- aggr(data[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(data[f]), cex.axis=0.35,
gap=3, ylab=c("Missing data","Pattern"))
?mice_plot
??mice_plot
md.pattern(data) # Provide information about the -NA- vars
warnings()
warnings()
md.pattern(data) # Provide information about the -NA- vars
md.pattern(data) # Provide information about the -NA- vars
len(f)
lenght(f)
length(f)
any(is.na(data$class of worker:))
any(is.na(data$class of worker))
any(is.na(data$age))
any(is.na(data$class of worker))
any(is.na(data$class of worker:))
any(is.na(data$class\of\worker))
any(is.na(data$class\ of\ worker))
any(is.na(data$`age:`))
any(is.na(data$`class of worker:`))
warnings()
suppressWarnings(md.pattern(data))
suppressWarnings(md.pattern(data))
str(data)
mode(data$age)
mode(data$age:)
mode(data$age)
mode(data$`class of worker`)
which(class(data) == "factor" )
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
# Impute the missing values
imputed_Data <- mice(df, m=1, maxit = 2, method = 'pmm', seed = 1)
library(mice)
library(VIM)
# Impute the missing values
imputed_Data <- mice(df, m=1, maxit = 2, method = 'pmm', seed = 1)
imputed_Data
save.image("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
library(nnet)
library(mice)      ## package for general multiple imputation
library(missForest)## package for factorial imputation
library(VIM)
library(RCurl)     ## package for downloading URLs
library(XML)       ## package for reading HTML files
library(xtable)    ## package for printing HTML tables
library(corrgram)  ## package for plotting correlations
library(prettyR)   ## package for cross-tabulation
library(ggplot2)   ## package for producing graphical plots
library(gridExtra)
any(is.na(dftrain.miss))
# fill NA into 4 variables of migration
dftrain.miss[rand.same4 , c(26,27,28,30)] <- NA
# fil NA into 'country.of.birth.father'
dftrain.miss[rand.father , 33] <- NA
# fill NA into 'country.of.birth.mother'
dftrain.miss[rand.mother , 34] <- NA
# fill NA into 'country.of.birth.self'
dftrain.miss[rand.self , 35] <- NA
# and just a few into "state.of.previous.residence"
dftrain.miss[rand.resi , 22] <- NA
imputed_Data.train3 <- mice(dftrain.miss , m=1 , maxit=10 , method = 'polyreg', nnet.MaxNWts = 15100)
imputed_Data.train2 <- mice(dftrain.miss , m=1 , maxit=10 , method = 'cart')
save.image("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
library(nnet)
library(mice)      ## package for general multiple imputation
library(missForest)## package for factorial imputation
library(VIM)
library(RCurl)     ## package for downloading URLs
library(XML)       ## package for reading HTML files
library(xtable)    ## package for printing HTML tables
library(corrgram)  ## package for plotting correlations
library(prettyR)   ## package for cross-tabulation
library(ggplot2)   ## package for producing graphical plots
library(gridExtra)
#
#
#
# Plot Variables with -NA- from the subSet [dftrain.miss]
mice_plot.train <- aggr(dftrain.miss[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
#######
## Step3 - Visualize and Impute Missing Values
#
#
##---- Visualization of MissingValues -----##
#
#
# Plot Variables with -NA- from the Initial_Dataset [df]
mice_plot <- aggr(df[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
zehni2 = mice::complete(imputed_Data.train2)
zehni3 = mice::complete(imputed_Data.train3)
head(forest_imputation_1$ximp)
err2 = mixError(zehni , dftrain.miss , dftrain)
err2 = mixError(zehni2 , dftrain.miss , dftrain)
err2
err3 = mixError(zehni3 , dftrain.miss , dftrain)
err3
#######
#
## --- Other tries of Imputation with package 'missForest' --- ##
#
forest_imputation_1 = missForest(dftrain.miss ,maxiter = 2 , ntree = 50)
forest_imputation_1$OOBerror
err1 = mixError(forest_imputation_1$ximp , dftrain.miss , dftrain)
err1
err2
#######
#
## --- Other tries of Imputation with package 'missForest' --- ##
#
forest_imputation_1 = missForest(dftrain.miss ,maxiter = 3 , ntree = 30)
err1 = mixError(forest_imputation_1$ximp , dftrain.miss , dftrain)
err1
#######
#
## --- Other tries of Imputation with package 'missForest' --- ##
#
forest_imputation_1 = missForest(dftrain.miss ,maxiter = 4,maxnodes = 100 ,
replace = T ,variablewise = T , ntree = 30)
forest_imputation_1$OOBerror
forest_imputation_1$OOBerror[forest_imputation_1$OOBerror >0]
which(forest_imputation_1$OOBerror[forest_imputation_1$OOBerror >0])
which(forest_imputation_1$OOBerror >0)
names(which(forest_imputation_1$OOBerror >0))
names(dftrain(which(forest_imputation_1$OOBerror >0)))
names(dftrain[which(forest_imputation_1$OOBerror >0)])
err1 = mixError(forest_imputation_1$ximp , dftrain.miss , dftrain)
err1
err2 = mixError(zehni2 , dftrain.miss , dftrain)
err2
save.image("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
## Define function for htmml output :
#
# Input : object to be exported , file_name
# Output : file .html
fhl = function(x , name){
y = write(print(xtable(x , caption='Missing_NA_Pattern'), caption.placement = 'top', type="html",
html.table.attributes='border=1 align="center" bgcolor="white"') , file = name)
return(y)
}
fhl(err2 , "/home/dead/Documents/DBDM/Assignment-3/census/Project/errors.html")
class(smr.html)
#######
## Step3 - Visualize and Impute Missing Values
#
#
##---- Visualization of MissingValues -----##
#
#
# Plot Variables with -NA- from the Initial_Dataset [df]
mice_plot <- aggr(df[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
#
#
#
# Plot Variables with -NA- from the subSet [dftrain.miss]
mice_plot.train <- aggr(dftrain.miss[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
err2 = mixError(zehni2 , dftrain.miss , dftrain)
err2
err3 = mixError(zehni3 , dftrain.miss , dftrain)
err3
save.image("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
library(nnet)
library(mice)      ## package for general multiple imputation
library(missForest)## package for factorial imputation
library(VIM)
library(RCurl)     ## package for downloading URLs
library(XML)       ## package for reading HTML files
library(xtable)    ## package for printing HTML tables
library(corrgram)  ## package for plotting correlations
library(prettyR)   ## package for cross-tabulation
library(ggplot2)   ## package for producing graphical plots
library(gridExtra)
#
# (OPTIONAL) Export the data in .csv file.
write.csv(x = data ,file = "/home/dead/Documents/DBDM/Assignment-3/census/eisai_polu_glukoulis_200K.csv")
# Now we have two smaller cross section datasets dftrain : GroundTruth(without NA)
# and dftrain.miss : simulated NA values trainSet
#
# Exporting to csv files
#
write.csv(x = data ,
file = "/home/dead/Documents/DBDM/Assignment-3/census/eisai_polu_glukoulis_dftrain_10K.csv")
4900 *5
330 * 5
306*5
170*5
35*5
str(df)
dim(dftrain)
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
dim(dftrain.miss)
str(dftrain.miss)
R --version
version
0.49967 * 95130
0.033645244 * 95130
0.030668144 * 95130
0.01700 * 95130
0.003548 * 95130
dim(dftrain)
rand.small.dftrain = sample(1:dim(df0)[1] , 95130)
dftrain = df0[rand.small.dftrain , ]
#
#
# generate random NA values for specific variables
# we use the same random.num array for: "migration.code.change.in.msa"
#                                       "migration.code.change.in.reg"
#                                       "migration.code.move.within.reg"
#                                       "migration.prev.res.in.sunbelt"
#
# but different random.num array for the rest in order to simulate the actual data.
# We are trying to simulate the pattern of NAs in the small dataset for each variable
#
rand.same4 = sample(1:dim(dftrain)[1] , 47533) # random observations for the four vars
rand.father = sample(1:dim(dftrain)[1] , 3200) # size = 320 which is 3.3% 10.000
rand.mother = sample(1:dim(dftrain)[1] , 2917)
rand.self = sample(1:dim(dftrain)[1] , 1617)
rand.resi = sample(1:dim(dftrain)[1] , 337)
#
# Generate fake NA data on dftrain based on the previous permitations
dftrain.miss = dftrain
# fill NA into 4 variables of migration
dftrain.miss[rand.same4 , c(26,27,28,30)] <- NA
# fil NA into 'country.of.birth.father'
dftrain.miss[rand.father , 33] <- NA
# fill NA into 'country.of.birth.mother'
dftrain.miss[rand.mother , 34] <- NA
# fill NA into 'country.of.birth.self'
dftrain.miss[rand.self , 35] <- NA
# and just a few into "state.of.previous.residence"
dftrain.miss[rand.resi , 22] <- NA
#
#
#
#
#
mice_plot.train <- aggr(dftrain.miss[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
library(nnet)
library(mice)      ## package for general multiple imputation
library(missForest)## package for factorial imputation
library(VIM)
library(RCurl)     ## package for downloading URLs
library(XML)       ## package for reading HTML files
library(xtable)    ## package for printing HTML tables
library(corrgram)  ## package for plotting correlations
library(prettyR)   ## package for cross-tabulation
library(ggplot2)   ## package for producing graphical plots
library(gridExtra)
#
#
#
#
#
mice_plot.train <- aggr(dftrain.miss[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
dim(df)
#######
## Step3 - Visualize and Impute Missing Values
#
#
##---- Visualization of MissingValues -----##
#
#
# Plot Variables with -NA- from the Initial_Dataset [df]
mice_plot <- aggr(df[f], col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(df[f]), cex.axis=0.3,
gap=1, ylab=c("Missing data","Pattern"))
save.image("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
str(data)
str(df)
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
dim(dftrain)
#############################################
# ___-- RULES-APRIORI --________#
#
#
# We are gonna test the apriori algo in a small simulation of the dataset
# Without NA values.
# Sim.Data : 1000 x 42
sim.data = dftrain[sample(x = 1:95130 , size = 1000,replace = F) , ]
rules = apriori(sim.data)
View(sim.data)
dim(sim.data)
any(is.na(sim.data))
str(sim.data)
str(as.factor(sim.data))
kariolis = as.factor(sim.data)
data("iris")
iris
kariolis = factor(iris)
kariolis = as.data.frame(unclass(iris))
str(kariolis)
factor(kariolis)
kariolis = as.character.factor(kariolis)
kariolis$Sepal.Length = as.factor(kariolis$Sepal.Length)
kariolis$Sepal.Width - as.factor(kariolis$Sepal.Width)
str(kariolis)
kariolis$Sepal.Width = as.factor(kariolis$Sepal.Width)
kariolis$Petal.Length = as.factor(kariolis$Petal.Length)
kariolis$Petal.Width = as.factor(kariolis$Petal.Width)
str(kariolis)
rules = apriori(kariolis)
inspect(rules)
load("~/Documents/DBDM/Assignment-3/census/Project/Project-2.RData")
View(df)
dim(df)
str(df)
levels(df$class.of.worker)
str(df$detailed.industry.recode)
levels(df$class.of.worker)
levels(df$education)
df$education[df$education == c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children")] = "NotGRD"
levels(df$education)
levels(df$education)[" 10th grade"]
levels(df$education)[1]
tsoutsa
tsoutsa = which(levels(df$education) == c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children"))
tsoutsa
which(levels(df$education) == c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children"))
levels(df$education)
levels(df$education)[1]
levels(df$education)[2]
levels(df$education)[3]
levels(df$education)[4]
levels(df$education)[5]
levels(df$education)[5]
levels(df$education)[6]
levels(df$education)[7]
levels(df$education)[8]
which(levels(df$education) == any(c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children"))
)
which(levels(df$education) == any(c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children")))
which(levels(df$education) == all(c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children")))
which(levels(df$education) == c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children"))
locf()?
?locf()
?locf
locf
levels(df$education) == "l 10th grade"
levels(df$education) == " 10th grade"
levels(df$education) == c(" 10th grade" , " 12th grade no diploma")
levels(df$education) == " 12th grade no diploma"
levels(df$education)
which(levels(df$education) == c(" 10th grade" , " 12th grade no diploma" ," 5th or 6th grade" ,
" 9th grade" , " 11th grade" ," 12th grade no diploma",
" 1st 2nd 3rd or 4th grade" , " 5th or 6th grade",
" 7th and 8th grade" , " Less than 1st grade" ,
" Children"))
levels(df$wage.per.hour)
str(df$wage.per.hour)
summary(df$wage.per.hour)
str(df$wage.per.hour)
plot(df$wage.per.hour)
plot(df$wage.per.hour)
levels(df$enroll.in.edu.inst.last.wk)
levels(df$marital.stat)
levels(df$major.industry.code)
levels(df$major.occupation.code)
levels(df$major.industry.code)
tsoutsa = c(0, 40, 44, 2, 43, 47, 48, 1, 11, 19, 24, 25, 32, 33, 34, 35, 36, 37, 38, 39, 4, 42, 45, 5, 15, 16, 22, 29, 31, 50, 14, 17, 18, 28, 3, 30, 41, 46, 51, 12, 13, 21, 23, 26, 6, 7, 9, 49, 27, 8, 10, 20)
length(tsoutsa)
levels(df$race)
levels(df$hispanic.origin)
levels(df$migration.code.change.in.msa)
any(is.na(df$hispanic.origin))
levels(df$sex)
levels(df$member.of.a.labor.union)
levels(df$reason.for.unemployment)
levels(df$full.or.part.time.employment.stat)
levels(df$capital.gains)
str(df$capital.gains)
summary(df$capital.gains)
plot(df$capital.gains)
levels(df$tax.filer.stat)
levels(df$region.of.previous.residence)
levels(df$state.of.previous.residence)
levels(df$detailed.household.and.family.stat)
levels(df$detailed.household.summary.in.household)
levels(df$instance.weight)
str(df$instance.weight)
summary(df$instance.weight)
levels(df$migration.code.change.in.msa)
str(df$year)
summaru(df$Binary)
summaru(df$year)
summary(df$year)
levels(df$migration.code.change.in.reg)
levels(df$migration.prev.res.in.sunbelt)
levels(df$country.of.birth.father)
levels(df$country.of.birth.mother)
str(df)
dim(data)
# Now we have two smaller cross section datasets dftrain : GroundTruth(without NA)
# and dftrain.miss : simulated NA values trainSet
#
# Exporting dftrain to csv files
#
write.csv(x = data ,
file = "/home/dead/Documents/DBDM/Assignment-3/census/eisai_polu_glukoulis_OLA.csv")
source('~/Documents/DBDM/Assignment-3/census/Project/Final/bin/Explore_Data.R')
source('~/Documents/DBDM/Assignment-3/census/Project/Final/bin/Explore_Data.R')
names_cool <- read.csv(name_path, header=FALSE)
source('~/Documents/DBDM/Assignment-3/census/Project/Final/bin/Explore_Data.R')
source('~/Documents/DBDM/Assignment-3/census/Project/Final/bin/Clean_ImputedData.R')
